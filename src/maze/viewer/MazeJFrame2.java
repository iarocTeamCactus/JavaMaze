/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package maze.viewer;

import maze.controller.MazeController;
import maze.pieces.MazePiece;

/**
 *
 * @author Rob.Erwin@gmail.com
 */
public class MazeJFrame2 extends javax.swing.JFrame {

	static MazeJFrame2 me;
    /**
     * Creates new form MazeJFrame2
     */
    public MazeJFrame2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mazeJPanel21 = new maze.viewer.MazeJPanel2();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout mazeJPanel21Layout = new javax.swing.GroupLayout(mazeJPanel21);
        mazeJPanel21.setLayout(mazeJPanel21Layout);
        mazeJPanel21Layout.setHorizontalGroup(
            mazeJPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        mazeJPanel21Layout.setVerticalGroup(
            mazeJPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mazeJPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mazeJPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MazeJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MazeJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MazeJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MazeJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
            	
                me = new MazeJFrame2();
                me.setVisible(true);
            }
        });
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MazeController(me);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private maze.viewer.MazeJPanel2 mazeJPanel21;
    // End of variables declaration//GEN-END:variables
	public void setStartingPiece(MazePiece firstPiece) {
		System.out.println("MazeJFrame.setStartingPiece " + firstPiece);	
		if (mazeJPanel21 != null)
			mazeJPanel21.setStartingPiece(firstPiece);
		
	}

	public void setEastWestSize(int i) {
		mazeJPanel21.setEastWestSize(i);
	}

	public void setNorthSouthSize(int i) {
		mazeJPanel21.setNorthSouthSize(i);		
	}

	public void setWestMostLoc(int westMost) {
		mazeJPanel21.setWestMostLoc(westMost);
	}

	public void setNorthMostLoc(int northMost) {
		mazeJPanel21.setNorthMostLoc(northMost);
	}

	public void setSouthMostLoc(int southMost) {
		mazeJPanel21.setSouthMostLoc(southMost);
	}

	public void setEastMostLoc(int eastMost) {
		mazeJPanel21.setEastMostLoc(eastMost);
	}
	

}
